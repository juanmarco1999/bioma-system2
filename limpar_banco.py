#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Script para limpar o banco de dados BIOMA mantendo √≠ndices e estrutura.

Este script:
- Remove todos os documentos das cole√ß√µes (exceto users e auditoria)
- Mant√©m os √≠ndices e estrutura das cole√ß√µes
- Registra auditoria da opera√ß√£o
- Requer confirma√ß√£o com c√≥digo LIMPAR2025

Uso:
    python limpar_banco.py

ATEN√á√ÉO: Esta opera√ß√£o √© IRREVERS√çVEL! Use com extrema cautela.
"""

import os
import sys
from datetime import datetime
from pymongo import MongoClient
from getpass import getpass
from urllib.parse import quote_plus

# Carregar vari√°veis do .env
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Arquivo .env carregado com sucesso")
except ImportError:
    print("‚ö†Ô∏è Biblioteca python-dotenv n√£o encontrada. Instale com: pip install python-dotenv")
except Exception as e:
    print(f"‚ö†Ô∏è Erro ao carregar .env: {e}")

# Configura√ß√µes do MongoDB
# Prioridade: MONGODB_URI > construir do .env > solicitar ao usu√°rio
MONGODB_URI = os.environ.get('MONGODB_URI')

# Se n√£o tiver MONGODB_URI pronta, construir a partir das vari√°veis do .env
if not MONGODB_URI:
    mongo_username = os.environ.get('MONGO_USERNAME')
    mongo_password = os.environ.get('MONGO_PASSWORD')
    mongo_cluster = os.environ.get('MONGO_CLUSTER')

    if mongo_username and mongo_password and mongo_cluster:
        # Escapar username e password para RFC 3986 (caracteres especiais como @, :, /)
        username_escaped = quote_plus(mongo_username)
        password_escaped = quote_plus(mongo_password)
        MONGODB_URI = f"mongodb+srv://{username_escaped}:{password_escaped}@{mongo_cluster}/"
        print(f"‚úÖ URI MongoDB constru√≠da a partir do .env")

DB_NAME = os.environ.get('DB_NAME', 'bioma')

# C√≥digo de seguran√ßa
CODIGO_SEGURANCA = 'LIMPAR2025'

# Cole√ß√µes que ser√£o limpas (mant√©m users e auditoria)
COLECOES_LIMPAR = [
    'clientes',
    'profissionais',
    'servicos',
    'produtos',
    'orcamentos',
    'contratos',
    'agendamentos',
    'estoque_movimentacoes',
    'comissoes',
    'despesas',
    'assistentes',
    'fila',
    'prontuarios'
]


def conectar_banco():
    """Conecta ao banco de dados MongoDB."""
    try:
        client = MongoClient(MONGODB_URI, serverSelectionTimeoutMS=5000)
        # Testa a conex√£o
        client.admin.command('ping')
        db = client[DB_NAME]
        print(f"‚úÖ Conectado ao MongoDB: {DB_NAME}")
        return db, client
    except Exception as e:
        print(f"‚ùå Erro ao conectar ao MongoDB: {e}")
        sys.exit(1)


def verificar_indices(db):
    """Lista os √≠ndices de todas as cole√ß√µes antes da limpeza."""
    print("\nüìã √çndices atuais nas cole√ß√µes:")
    print("=" * 60)
    indices_salvos = {}

    for colecao_nome in COLECOES_LIMPAR:
        try:
            colecao = db[colecao_nome]
            indices = list(colecao.list_indexes())
            indices_salvos[colecao_nome] = indices
            print(f"\nüìÇ {colecao_nome}:")
            for idx in indices:
                print(f"   - {idx['name']}: {idx.get('key', {})}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Erro ao listar √≠ndices: {e}")

    return indices_salvos


def limpar_banco(db):
    """Limpa os dados do banco mantendo √≠ndices e estrutura."""
    print("\nüóëÔ∏è  Iniciando limpeza do banco de dados...")
    print("=" * 60)

    estatisticas = {}
    total_deletados = 0

    for colecao_nome in COLECOES_LIMPAR:
        try:
            colecao = db[colecao_nome]

            # Contar documentos antes
            count_antes = colecao.count_documents({})

            if count_antes == 0:
                print(f"‚ö™ {colecao_nome}: j√° est√° vazia")
                estatisticas[colecao_nome] = {'antes': 0, 'deletados': 0}
                continue

            # Deletar todos os documentos (mant√©m cole√ß√£o e √≠ndices)
            resultado = colecao.delete_many({})
            deletados = resultado.deleted_count
            total_deletados += deletados

            # Contar documentos depois (deve ser 0)
            count_depois = colecao.count_documents({})

            print(f"‚úÖ {colecao_nome}: {deletados} documentos deletados ({count_antes} ‚Üí {count_depois})")

            estatisticas[colecao_nome] = {
                'antes': count_antes,
                'deletados': deletados,
                'depois': count_depois
            }

        except Exception as e:
            print(f"‚ùå Erro ao limpar {colecao_nome}: {e}")
            estatisticas[colecao_nome] = {'erro': str(e)}

    return estatisticas, total_deletados


def registrar_auditoria(db, usuario='Script'):
    """Registra a opera√ß√£o de limpeza na auditoria."""
    try:
        db.auditoria.insert_one({
            'username': usuario,
            'acao': 'LIMPAR_BANCO_DADOS',
            'entidade': 'SISTEMA',
            'timestamp': datetime.now(),
            'detalhes': 'Limpeza completa via script Python (mantendo √≠ndices)',
            'codigo_usado': CODIGO_SEGURANCA
        })
        print("‚úÖ Auditoria registrada")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao registrar auditoria: {e}")


def main():
    """Fun√ß√£o principal do script."""
    global MONGODB_URI

    print("\n" + "=" * 60)
    print("üßπ SCRIPT DE LIMPEZA DO BANCO DE DADOS BIOMA v6.0")
    print("=" * 60)
    print("\n‚ö†Ô∏è  ATEN√á√ÉO: Esta opera√ß√£o ir√° DELETAR TODOS OS DADOS!")
    print("‚ö†Ô∏è  Os √≠ndices e estrutura das cole√ß√µes ser√£o MANTIDOS")
    print("‚ö†Ô∏è  As cole√ß√µes 'users' e 'auditoria' N√ÉO ser√£o afetadas\n")

    # Se MONGODB_URI n√£o est√° definida, solicitar ao usu√°rio
    if not MONGODB_URI:
        print("‚ùå URI do MongoDB n√£o encontrada no .env")
        print("üîó Por favor, configure no arquivo .env:")
        print("   MONGODB_URI=mongodb+srv://usuario:senha@cluster.mongodb.net/")
        print("   OU configure:")
        print("   MONGO_USERNAME=seu_usuario")
        print("   MONGO_PASSWORD=sua_senha")
        print("   MONGO_CLUSTER=seu_cluster.mongodb.net")
        sys.exit(1)

    # Mostrar informa√ß√µes de conex√£o (sem expor senha)
    server_info = MONGODB_URI.split('@')[-1].split('/')[0] if '@' in MONGODB_URI else 'localhost'
    print(f"üìç Banco de dados: {DB_NAME}")
    print(f"üåê Servidor: {server_info}\n")

    # Solicitar confirma√ß√£o 1
    resposta = input("Voc√™ tem certeza que deseja continuar? (sim/n√£o): ").strip().lower()
    if resposta not in ['sim', 's', 'yes', 'y']:
        print("‚ùå Opera√ß√£o cancelada pelo usu√°rio")
        sys.exit(0)

    # Solicitar c√≥digo de seguran√ßa
    print(f"\nüîê Para confirmar, digite o c√≥digo de seguran√ßa: {CODIGO_SEGURANCA}")
    codigo = input("C√≥digo: ").strip()

    if codigo != CODIGO_SEGURANCA:
        print("‚ùå C√≥digo inv√°lido! Opera√ß√£o cancelada.")
        sys.exit(1)

    # Conectar ao banco
    db, client = conectar_banco()

    # Verificar √≠ndices antes da limpeza
    print("\nüîç Verificando √≠ndices atuais...")
    indices_antes = verificar_indices(db)

    # Solicitar confirma√ß√£o final
    print("\n‚ö†Ô∏è  √öLTIMA CONFIRMA√á√ÉO")
    resposta_final = input("Digite 'CONFIRMO' para prosseguir com a limpeza: ").strip()
    if resposta_final != 'CONFIRMO':
        print("‚ùå Opera√ß√£o cancelada")
        client.close()
        sys.exit(0)

    # Registrar auditoria ANTES da limpeza
    registrar_auditoria(db)

    # Executar limpeza
    estatisticas, total = limpar_banco(db)

    # Verificar √≠ndices ap√≥s limpeza
    print("\nüîç Verificando √≠ndices ap√≥s limpeza...")
    indices_depois = verificar_indices(db)

    # Resumo final
    print("\n" + "=" * 60)
    print("üìä RESUMO DA OPERA√á√ÉO")
    print("=" * 60)
    print(f"‚úÖ Total de documentos deletados: {total}")
    print(f"‚úÖ Cole√ß√µes processadas: {len(estatisticas)}")
    print(f"‚úÖ √çndices mantidos: {'SIM' if indices_antes == indices_depois else 'VERIFICAR'}")
    print("\nüíæ Detalhes:")
    for colecao, stats in estatisticas.items():
        if 'erro' in stats:
            print(f"   ‚ùå {colecao}: {stats['erro']}")
        else:
            print(f"   ‚úÖ {colecao}: {stats['deletados']} docs deletados")

    print("\n‚úÖ Limpeza conclu√≠da com sucesso!")
    print("=" * 60)

    # Fechar conex√£o
    client.close()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Opera√ß√£o cancelada pelo usu√°rio (Ctrl+C)")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)
