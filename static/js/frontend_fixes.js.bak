/**
 * BIOMA SYSTEM - Frontend Fixes & Enhancements
 * Arquivo de corre√ß√µes e melhorias do frontend
 * Vers√£o: 1.0
 */

console.log('üöÄ Frontend Fixes carregado!');

// ==================== CORRE√á√ÉO: NAVEGA√á√ÉO DE ABAS ====================

/**
 * Fun√ß√£o principal de navega√ß√£o entre se√ß√µes
 * Corrige o problema de duplica√ß√£o e carregamento infinito
 */
window.goTo = function(section) {
    console.log(`üîÑ Navegando para: ${section}`);

    try {
        // 1. Esconder todas as se√ß√µes
        document.querySelectorAll('.content-section').forEach(s => {
            s.classList.remove('active');
            s.style.display = 'none';
        });

        // 2. Mostrar apenas a se√ß√£o selecionada
        const sectionElement = document.getElementById('section-' + section);
        if (sectionElement) {
            sectionElement.classList.add('active');
            sectionElement.style.display = 'block';
        } else {
            console.error(`‚ùå Se√ß√£o n√£o encontrada: section-${section}`);
            return;
        }

        // 3. Atualizar menu sidebar
        document.querySelectorAll('.sidebar-menu a').forEach(a => a.classList.remove('active'));
        const menu = document.getElementById('menu-' + section);
        if (menu) menu.classList.add('active');

        // 4. Scroll para o topo
        const mainContent = document.querySelector('.main-content');
        if (mainContent) mainContent.scrollTo({ top: 0, behavior: 'smooth' });

        // 5. Carregar dados da se√ß√£o (apenas se necess√°rio)
        carregarDadosSecao(section);

        console.log(`‚úÖ Se√ß√£o ativada: ${section}`);
    } catch (error) {
        console.error('‚ùå Erro ao navegar:', error);
    }
};

/**
 * Fun√ß√£o para alternar sub-tabs
 * Corrige o problema de altern√¢ncia de sub-abas
 */
window.switchSubTab = function(section, subtab) {
    console.log(`üîÑ Alternando sub-tab: ${section} ‚Üí ${subtab}`);

    try {
        // 1. Esconder todos os conte√∫dos de sub-tabs da se√ß√£o
        const sectionElement = document.getElementById('section-' + section);
        if (!sectionElement) {
            console.error(`‚ùå Se√ß√£o n√£o encontrada: section-${section}`);
            return;
        }

        // Esconder todos os sub-tab-content
        sectionElement.querySelectorAll('.sub-tab-content').forEach(content => {
            content.classList.remove('active');
            content.style.display = 'none';
        });

        // 2. Desativar todos os bot√µes de sub-tab
        sectionElement.querySelectorAll('.sub-tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });

        // 3. Mostrar o sub-tab selecionado
        const targetId = `${section}-subtab-${subtab}`;
        const targetContent = document.getElementById(targetId);

        if (!targetContent) {
            console.error(`‚ùå Sub-tab n√£o encontrada: ${targetId}`);
            return;
        }

        targetContent.classList.add('active');
        targetContent.style.display = 'block';

        // 4. Ativar o bot√£o clicado
        const clickedButton = event?.target?.closest('.sub-tab-btn');
        if (clickedButton) {
            clickedButton.classList.add('active');
        }

        console.log(`‚úÖ Sub-tab ativada: ${targetId}`);

        // 5. Carregar dados espec√≠ficos da sub-tab
        carregarDadosSubTab(section, subtab);

    } catch (error) {
        console.error('‚ùå Erro ao alternar sub-tab:', error);
    }
};

/**
 * Carrega dados da se√ß√£o de forma otimizada
 */
function carregarDadosSecao(section) {
    switch(section) {
        case 'dashboard':
            loadDashboardOtimizado();
            break;
        case 'clientes':
            loadClientesOtimizado();
            break;
        case 'profissionais':
            loadProfissionaisOtimizado();
            break;
        case 'produtos':
            loadProdutosOtimizado();
            break;
        case 'servicos':
            loadServicosOtimizado();
            break;
        case 'estoque':
            loadEstoqueOtimizado();
            break;
        case 'agendamentos':
            loadAgendamentosOtimizado();
            break;
        case 'relatorios':
            loadRelatoriosOtimizado();
            break;
        case 'auditoria':
            loadAuditoriaOtimizado();
            break;
        case 'financeiro':
            loadFinanceiroOtimizado();
            break;
        default:
            console.log(`‚ÑπÔ∏è Se√ß√£o ${section} n√£o requer carregamento autom√°tico`);
    }
}

/**
 * Carrega dados de sub-tabs espec√≠ficas
 */
function carregarDadosSubTab(section, subtab) {
    const key = `${section}-${subtab}`;

    switch(key) {
        case 'orcamento-pendentes':
            loadOrcamentosPendentes();
            break;
        case 'orcamento-aprovados':
            loadOrcamentosAprovados();
            break;
        case 'orcamento-rejeitados':
            loadOrcamentosRejeitados();
            break;
        case 'estoque-alertas':
            loadEstoqueAlertas();
            break;
        case 'relatorios-mapa-calor':
            loadMapaCalor();
            break;
        default:
            console.log(`‚ÑπÔ∏è Sub-tab ${key} n√£o requer carregamento espec√≠fico`);
    }
}

// ==================== FUN√á√ïES DE CARREGAMENTO OTIMIZADAS ====================

/**
 * Dashboard otimizado
 */
async function loadDashboardOtimizado() {
    try {
        console.log('üìä Carregando dashboard...');

        // Implementa√ß√£o existente ou nova otimizada
        if (typeof loadDashboard === 'function') {
            loadDashboard();
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar dashboard:', error);
    }
}

/**
 * Clientes otimizado com pagina√ß√£o
 */
async function loadClientesOtimizado(page = 1) {
    try {
        console.log('üë• Carregando clientes (p√°gina ' + page + ')...');

        const response = await fetch(`/api/clientes/lista-otimizada?page=${page}&per_page=50`);
        const data = await response.json();

        if (data.success) {
            renderClientesTabela(data.clientes, data.pagination);
        } else {
            throw new Error(data.message || 'Erro ao carregar clientes');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar clientes:', error);
        mostrarErro('Erro ao carregar clientes: ' + error.message);
    }
}

/**
 * Profissionais otimizado
 */
async function loadProfissionaisOtimizado(page = 1) {
    try {
        console.log('üë®‚Äçüíº Carregando profissionais...');

        const response = await fetch(`/api/profissionais/lista-otimizada?page=${page}&per_page=50`);
        const data = await response.json();

        if (data.success) {
            renderProfissionaisTabela(data.profissionais, data.pagination);
        } else {
            throw new Error(data.message || 'Erro ao carregar profissionais');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar profissionais:', error);
        mostrarErro('Erro ao carregar profissionais: ' + error.message);
    }
}

/**
 * Produtos otimizado
 */
async function loadProdutosOtimizado(page = 1) {
    try {
        console.log('üì¶ Carregando produtos...');

        const response = await fetch(`/api/produtos/lista-otimizada?page=${page}&per_page=50`);
        const data = await response.json();

        if (data.success) {
            renderProdutosTabela(data.produtos, data.pagination);
        } else {
            throw new Error(data.message || 'Erro ao carregar produtos');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar produtos:', error);
        mostrarErro('Erro ao carregar produtos: ' + error.message);
    }
}

/**
 * Servi√ßos otimizado
 */
async function loadServicosOtimizado(page = 1) {
    try {
        console.log('‚úÇÔ∏è Carregando servi√ßos...');

        const response = await fetch(`/api/servicos/lista-otimizada?page=${page}&per_page=50`);
        const data = await response.json();

        if (data.success) {
            renderServicosTabela(data.servicos, data.pagination);
        } else {
            throw new Error(data.message || 'Erro ao carregar servi√ßos');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar servi√ßos:', error);
        mostrarErro('Erro ao carregar servi√ßos: ' + error.message);
    }
}

/**
 * Estoque otimizado - CORRIGE CARREGAMENTO INFINITO
 */
async function loadEstoqueOtimizado() {
    try {
        console.log('üìä Carregando estoque...');

        const response = await fetch('/api/estoque/visao-geral-otimizada');
        const data = await response.json();

        if (data.success) {
            renderEstoqueVisaoGeral(data.data);
        } else {
            throw new Error(data.message || 'Erro ao carregar estoque');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar estoque:', error);
        mostrarErro('Erro ao carregar estoque: ' + error.message);
    }
}

/**
 * Agendamentos otimizado - CORRIGE CARREGAMENTO INFINITO
 */
async function loadAgendamentosOtimizado(page = 1) {
    try {
        console.log('üìÖ Carregando agendamentos...');

        const response = await fetch(`/api/agendamentos/lista-otimizada?page=${page}&per_page=50`);
        const data = await response.json();

        if (data.success) {
            renderAgendamentosTabela(data.agendamentos, data.pagination);
        } else {
            throw new Error(data.message || 'Erro ao carregar agendamentos');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar agendamentos:', error);
        mostrarErro('Erro ao carregar agendamentos: ' + error.message);
    }
}

/**
 * Relat√≥rios otimizado
 */
async function loadRelatoriosOtimizado() {
    try {
        console.log('üìà Carregando relat√≥rios...');

        const response = await fetch('/api/relatorios/resumo-geral');
        const data = await response.json();

        if (data.success) {
            renderResumoGeral(data);
        } else {
            throw new Error(data.message || 'Erro ao carregar relat√≥rios');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar relat√≥rios:', error);
        mostrarErro('Erro ao carregar relat√≥rios: ' + error.message);
    }
}

/**
 * Mapa de Calor otimizado - CORRIGE CARREGAMENTO INFINITO
 */
async function loadMapaCalor() {
    try {
        console.log('üî• Carregando mapa de calor...');

        // Pegar datas dos filtros se existirem
        const dataInicio = document.getElementById('mapaCalorDataInicio')?.value;
        const dataFim = document.getElementById('mapaCalorDataFim')?.value;

        let url = '/api/relatorios/mapa-calor?';
        if (dataInicio) url += `data_inicio=${dataInicio}&`;
        if (dataFim) url += `data_fim=${dataFim}`;

        const response = await fetch(url);
        const data = await response.json();

        if (data.success) {
            renderMapaCalor(data.mapa, data.tipo);
        } else {
            throw new Error(data.message || 'Erro ao carregar mapa de calor');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar mapa de calor:', error);
        mostrarErro('Erro ao carregar mapa de calor: ' + error.message);
    }
}

/**
 * Auditoria otimizado - CORRIGE CARREGAMENTO INFINITO
 */
async function loadAuditoriaOtimizado(page = 1) {
    try {
        console.log('üîç Carregando auditoria...');

        const response = await fetch(`/api/auditoria/logs?page=${page}&per_page=50`);
        const data = await response.json();

        if (data.success) {
            renderAuditoriaTabela(data.logs, data.pagination);
        } else {
            throw new Error(data.message || 'Erro ao carregar auditoria');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar auditoria:', error);
        mostrarErro('Erro ao carregar auditoria: ' + error.message);
    }
}

/**
 * Financeiro - NOVA ABA
 */
async function loadFinanceiroOtimizado() {
    try {
        console.log('üí∞ Carregando financeiro...');

        const response = await fetch('/api/financeiro/resumo');
        const data = await response.json();

        if (data.success) {
            renderFinanceiroResumo(data.data);
        } else {
            throw new Error(data.message || 'Erro ao carregar financeiro');
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar financeiro:', error);
        mostrarErro('Erro ao carregar financeiro: ' + error.message);
    }
}

// ==================== FUN√á√ïES DE RENDERIZA√á√ÉO ====================

/**
 * Renderiza tabela de clientes
 */
function renderClientesTabela(clientes, pagination) {
    const tbody = document.getElementById('clientesTableBody');
    if (!tbody) return;

    if (!clientes || clientes.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Nenhum cliente encontrado</td></tr>';
        return;
    }

    tbody.innerHTML = clientes.map(cliente => `
        <tr>
            <td>${cliente.nome || 'N/A'}</td>
            <td>${cliente.cpf || 'N/A'}</td>
            <td>${cliente.telefone || 'N/A'}</td>
            <td>${cliente.email || 'N/A'}</td>
            <td><strong>R$ ${(cliente.faturamento_total || 0).toFixed(2)}</strong></td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="visualizarCliente('${cliente._id}')">
                    <i class="bi bi-eye"></i>
                </button>
                <button class="btn btn-sm btn-outline" onclick="editarCliente('${cliente._id}')">
                    <i class="bi bi-pencil"></i>
                </button>
            </td>
        </tr>
    `).join('');

    renderPaginacao('clientes', pagination, loadClientesOtimizado);
}

/**
 * Renderiza tabela de profissionais
 */
function renderProfissionaisTabela(profissionais, pagination) {
    const tbody = document.getElementById('profissionaisTableBody');
    if (!tbody) return;

    if (!profissionais || profissionais.length === 0) {
        tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Nenhum profissional encontrado</td></tr>';
        return;
    }

    tbody.innerHTML = profissionais.map(prof => `
        <tr>
            <td>
                ${prof.foto_url ? `<img src="${prof.foto_url}" class="foto-profissional" alt="${prof.nome}">` : ''}
                ${prof.nome || 'N/A'}
            </td>
            <td>${prof.especialidade || 'N/A'}</td>
            <td>${prof.telefone || 'N/A'}</td>
            <td><strong>R$ ${(prof.comissoes_total || 0).toFixed(2)}</strong></td>
            <td>${prof.total_atendimentos || 0}</td>
            <td>
                <button class="btn btn-sm btn-primary" onclick="visualizarProfissional('${prof._id}')">
                    <i class="bi bi-eye"></i>
                </button>
                <button class="btn btn-sm btn-outline" onclick="editarProfissional('${prof._id}')">
                    <i class="bi bi-pencil"></i>
                </button>
            </td>
        </tr>
    `).join('');

    renderPaginacao('profissionais', pagination, loadProfissionaisOtimizado);
}

/**
 * Renderiza pagina√ß√£o gen√©rica
 */
function renderPaginacao(tipo, pagination, loadFunction) {
    const container = document.getElementById(`${tipo}Paginacao`);
    if (!container || !pagination) return;

    const { page, total_pages } = pagination;

    let html = '<nav><ul class="pagination justify-content-center">';

    // Bot√£o anterior
    html += `<li class="page-item ${page === 1 ? 'disabled' : ''}">
        <a class="page-link" href="#" onclick="event.preventDefault(); ${loadFunction.name}(${page - 1})">Anterior</a>
    </li>`;

    // N√∫meros das p√°ginas
    for (let i = 1; i <= total_pages; i++) {
        if (i === 1 || i === total_pages || (i >= page - 2 && i <= page + 2)) {
            html += `<li class="page-item ${i === page ? 'active' : ''}">
                <a class="page-link" href="#" onclick="event.preventDefault(); ${loadFunction.name}(${i})">${i}</a>
            </li>`;
        } else if (i === page - 3 || i === page + 3) {
            html += '<li class="page-item disabled"><span class="page-link">...</span></li>';
        }
    }

    // Bot√£o pr√≥ximo
    html += `<li class="page-item ${page === total_pages ? 'disabled' : ''}">
        <a class="page-link" href="#" onclick="event.preventDefault(); ${loadFunction.name}(${page + 1})">Pr√≥ximo</a>
    </li>`;

    html += '</ul></nav>';
    container.innerHTML = html;
}

// ==================== FUN√á√ïES DE IMPRESS√ÉO E WHATSAPP ====================

/**
 * Imprime or√ßamento
 */
async function imprimirOrcamento(orcamentoId) {
    try {
        console.log(`üñ®Ô∏è Imprimindo or√ßamento ${orcamentoId}...`);

        const response = await fetch(`/api/orcamento/${orcamentoId}/imprimir`);
        const data = await response.json();

        if (data.success) {
            abrirJanelaImpressao(data.dados, 'orcamento');
        } else {
            throw new Error(data.message || 'Erro ao preparar impress√£o');
        }
    } catch (error) {
        console.error('‚ùå Erro ao imprimir or√ßamento:', error);
        mostrarErro('Erro ao imprimir or√ßamento: ' + error.message);
    }
}

/**
 * Envia or√ßamento via WhatsApp
 */
async function enviarWhatsAppOrcamento(orcamentoId) {
    try {
        console.log(`üì± Enviando or√ßamento ${orcamentoId} via WhatsApp...`);

        const response = await fetch(`/api/orcamento/${orcamentoId}/whatsapp`);
        const data = await response.json();

        if (data.success) {
            window.open(data.link, '_blank');
            mostrarSucesso('Abrindo WhatsApp...');
        } else {
            throw new Error(data.message || 'Erro ao gerar link do WhatsApp');
        }
    } catch (error) {
        console.error('‚ùå Erro ao enviar WhatsApp:', error);
        mostrarErro(error.message);
    }
}

/**
 * Imprime contrato
 */
async function imprimirContrato(contratoId) {
    try {
        console.log(`üñ®Ô∏è Imprimindo contrato ${contratoId}...`);

        const response = await fetch(`/api/contrato/${contratoId}/imprimir`);
        const data = await response.json();

        if (data.success) {
            abrirJanelaImpressao(data.dados, 'contrato');
        } else {
            throw new Error(data.message || 'Erro ao preparar impress√£o');
        }
    } catch (error) {
        console.error('‚ùå Erro ao imprimir contrato:', error);
        mostrarErro('Erro ao imprimir contrato: ' + error.message);
    }
}

/**
 * Envia contrato via WhatsApp
 */
async function enviarWhatsAppContrato(contratoId) {
    try {
        console.log(`üì± Enviando contrato ${contratoId} via WhatsApp...`);

        const response = await fetch(`/api/contrato/${contratoId}/whatsapp`);
        const data = await response.json();

        if (data.success) {
            window.open(data.link, '_blank');
            mostrarSucesso('Abrindo WhatsApp...');
        } else {
            throw new Error(data.message || 'Erro ao gerar link do WhatsApp');
        }
    } catch (error) {
        console.error('‚ùå Erro ao enviar WhatsApp:', error);
        mostrarErro(error.message);
    }
}

/**
 * Abre janela de impress√£o
 */
function abrirJanelaImpressao(dados, tipo) {
    const janela = window.open('', '_blank', 'width=800,height=600');

    let html = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>${tipo === 'orcamento' ? 'Or√ßamento' : 'Contrato'} #${dados.numero}</title>
            <style>
                body { font-family: Arial, sans-serif; padding: 20px; }
                .header { text-align: center; margin-bottom: 30px; }
                .info { margin: 20px 0; }
                table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                th { background-color: #7C3AED; color: white; }
                .total { font-size: 1.5em; font-weight: bold; text-align: right; margin-top: 20px; }
                @media print {
                    .no-print { display: none; }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>BIOMA UBERABA</h1>
                <h2>${tipo === 'orcamento' ? 'OR√áAMENTO' : 'CONTRATO'} #${dados.numero}</h2>
                <p>Data: ${dados.data}</p>
            </div>

            <div class="info">
                <h3>Cliente</h3>
                <p><strong>Nome:</strong> ${dados.cliente.nome || 'N/A'}</p>
                <p><strong>CPF:</strong> ${dados.cliente.cpf || 'N/A'}</p>
                <p><strong>Telefone:</strong> ${dados.cliente.telefone || 'N/A'}</p>
                <p><strong>E-mail:</strong> ${dados.cliente.email || 'N/A'}</p>
            </div>
    `;

    if (tipo === 'orcamento') {
        if (dados.servicos && dados.servicos.length > 0) {
            html += `
                <h3>Servi√ßos</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Servi√ßo</th>
                            <th>Qtd</th>
                            <th>Valor Unit.</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            dados.servicos.forEach(servico => {
                html += `
                    <tr>
                        <td>${servico.nome}</td>
                        <td>${servico.quantidade}</td>
                        <td>R$ ${servico.preco_unitario.toFixed(2)}</td>
                        <td>R$ ${servico.preco_total.toFixed(2)}</td>
                    </tr>
                `;
            });
            html += '</tbody></table>';
        }

        if (dados.produtos && dados.produtos.length > 0) {
            html += `
                <h3>Produtos</h3>
                <table>
                    <thead>
                        <tr>
                            <th>Produto</th>
                            <th>Qtd</th>
                            <th>Valor Unit.</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            dados.produtos.forEach(produto => {
                html += `
                    <tr>
                        <td>${produto.nome}</td>
                        <td>${produto.quantidade}</td>
                        <td>R$ ${produto.preco_unitario.toFixed(2)}</td>
                        <td>R$ ${produto.preco_total.toFixed(2)}</td>
                    </tr>
                `;
            });
            html += '</tbody></table>';
        }

        html += `
            <div class="total">
                TOTAL: R$ ${dados.total_final.toFixed(2)}
            </div>
        `;
    }

    html += `
            <div class="no-print" style="text-align: center; margin-top: 30px;">
                <button onclick="window.print()" style="padding: 10px 20px; font-size: 16px; cursor: pointer;">
                    üñ®Ô∏è Imprimir
                </button>
                <button onclick="window.close()" style="padding: 10px 20px; font-size: 16px; cursor: pointer; margin-left: 10px;">
                    Fechar
                </button>
            </div>
        </body>
        </html>
    `;

    janela.document.write(html);
    janela.document.close();
}

// ==================== FUN√á√ïES DE NOTIFICA√á√ÉO ====================

/**
 * Notifica cliente na fila
 */
async function notificarClienteFila(agendamentoId) {
    try {
        console.log(`üîî Notificando cliente do agendamento ${agendamentoId}...`);

        const response = await fetch('/api/fila/notificar', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ agendamento_id: agendamentoId })
        });

        const data = await response.json();

        if (data.success) {
            mostrarSucesso(`Notifica√ß√£o enviada! ${data.dados.mensagem}`);
        } else {
            throw new Error(data.message || 'Erro ao enviar notifica√ß√£o');
        }
    } catch (error) {
        console.error('‚ùå Erro ao notificar cliente:', error);
        mostrarErro('Erro ao notificar cliente: ' + error.message);
    }
}

// ==================== UPLOAD DE LOGO ====================

/**
 * Faz upload do logo
 */
async function uploadLogo() {
    const fileInput = document.getElementById('logoUploadInput');
    if (!fileInput || !fileInput.files[0]) {
        mostrarErro('Selecione uma imagem');
        return;
    }

    try {
        const formData = new FormData();
        formData.append('logo', fileInput.files[0]);

        const response = await fetch('/api/config/logo', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();

        if (data.success) {
            mostrarSucesso('Logo atualizado com sucesso!');
            // Atualizar preview
            const preview = document.getElementById('logoPreview');
            if (preview) {
                preview.src = data.logo_url;
                preview.style.display = 'block';
            }
            // Atualizar logo na sidebar
            atualizarLogoSidebar(data.logo_url);
        } else {
            throw new Error(data.message || 'Erro ao fazer upload');
        }
    } catch (error) {
        console.error('‚ùå Erro ao fazer upload do logo:', error);
        mostrarErro('Erro ao fazer upload do logo: ' + error.message);
    }
}

/**
 * Atualiza logo na sidebar
 */
function atualizarLogoSidebar(logoUrl) {
    const sidebarLogo = document.querySelector('.sidebar-logo');
    if (sidebarLogo) {
        sidebarLogo.innerHTML = `
            <img src="${logoUrl}" alt="Logo" style="max-width: 100%; max-height: 80px; object-fit: contain;">
            <p style="margin-top: 10px;">Uberaba v3.7</p>
        `;
    }
}

/**
 * Carrega logo ao iniciar
 */
async function carregarLogo() {
    try {
        const response = await fetch('/api/config/logo');
        const data = await response.json();

        if (data.success && data.logo_url) {
            atualizarLogoSidebar(data.logo_url);
            const preview = document.getElementById('logoPreview');
            if (preview) {
                preview.src = data.logo_url;
                preview.style.display = 'block';
            }
        }
    } catch (error) {
        console.error('‚ùå Erro ao carregar logo:', error);
    }
}

// ==================== FUN√á√ïES AUXILIARES ====================

/**
 * Mostra mensagem de sucesso
 */
function mostrarSucesso(mensagem) {
    if (typeof Swal !== 'undefined') {
        Swal.fire({
            icon: 'success',
            title: 'Sucesso!',
            text: mensagem,
            timer: 3000,
            showConfirmButton: false
        });
    } else {
        alert(mensagem);
    }
}

/**
 * Mostra mensagem de erro
 */
function mostrarErro(mensagem) {
    if (typeof Swal !== 'undefined') {
        Swal.fire({
            icon: 'error',
            title: 'Erro!',
            text: mensagem
        });
    } else {
        alert('ERRO: ' + mensagem);
    }
}

// ==================== INICIALIZA√á√ÉO ====================

/**
 * Inicializa corre√ß√µes ao carregar a p√°gina
 */
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ Frontend Fixes inicializado!');

    // Carregar logo
    carregarLogo();

    // Configurar event listeners adicionais se necess√°rio
});

console.log('‚úÖ Frontend Fixes carregado com sucesso!');
