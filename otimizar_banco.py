#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
OTIMIZA√á√ÉO DO BANCO DE DADOS - BIOMA v5.1.0
Cria √≠ndices e otimiza consultas
"""

import os
import sys
from pymongo import MongoClient, ASCENDING, DESCENDING
from dotenv import load_dotenv
import logging
import urllib.parse

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)

# Carregar vari√°veis de ambiente
load_dotenv()

def conectar_banco():
    """Conecta ao MongoDB"""
    try:
        username = urllib.parse.quote_plus(os.getenv('MONGO_USERNAME', ''))
        password = urllib.parse.quote_plus(os.getenv('MONGO_PASSWORD', ''))
        cluster = os.getenv('MONGO_CLUSTER')

        if not all([username, password, cluster]):
            logger.error("‚ùå Vari√°veis de ambiente n√£o configuradas!")
            return None

        mongo_uri = f"mongodb+srv://{username}:{password}@{cluster}/?retryWrites=true&w=majority"
        client = MongoClient(mongo_uri, serverSelectionTimeoutMS=5000)

        # Testar conex√£o
        client.admin.command('ping')
        logger.info("‚úÖ Conectado ao MongoDB com sucesso!")

        return client['bioma_db']

    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar ao MongoDB: {e}")
        return None

def criar_indice_safe(collection, index_spec, **kwargs):
    """Cria √≠ndice ignorando erros de duplica√ß√£o"""
    try:
        collection.create_index(index_spec, **kwargs)
        return True
    except Exception as e:
        if 'IndexKeySpecsConflict' in str(e) or 'already exists' in str(e):
            return False  # √çndice j√° existe, ignorar
        raise  # Outro erro, propagar

def criar_indices(db):
    """Cria √≠ndices para otimizar consultas"""

    logger.info("\nüìä CRIANDO √çNDICES PARA OTIMIZA√á√ÉO...\n")

    indices_criados = 0

    try:
        # 1. √çNDICES NA COLE√á√ÉO USERS
        logger.info("1Ô∏è‚É£ Criando √≠ndices em 'users'...")
        if criar_indice_safe(db.users, [('username', ASCENDING)], unique=True): indices_criados += 1
        if criar_indice_safe(db.users, [('email', ASCENDING)], unique=True): indices_criados += 1
        if criar_indice_safe(db.users, [('role', ASCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'users'")

        # 2. √çNDICES NA COLE√á√ÉO CLIENTES
        logger.info("\n2Ô∏è‚É£ Criando √≠ndices em 'clientes'...")
        if criar_indice_safe(db.clientes, [('cpf', ASCENDING)], unique=True, background=True): indices_criados += 1
        if criar_indice_safe(db.clientes, [('nome', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.clientes, [('telefone', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.clientes, [('email', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.clientes, [('created_at', DESCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'clientes'")

        # 3. √çNDICES NA COLE√á√ÉO ORCAMENTOS
        logger.info("\n3Ô∏è‚É£ Criando √≠ndices em 'orcamentos'...")
        if criar_indice_safe(db.orcamentos, [('status', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.orcamentos, [('cliente_cpf', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.orcamentos, [('profissional_id', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.orcamentos, [('created_at', DESCENDING)]): indices_criados += 1
        if criar_indice_safe(db.orcamentos, [('data', DESCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'orcamentos'")

        # 4. √çNDICES NA COLE√á√ÉO AGENDAMENTOS
        logger.info("\n4Ô∏è‚É£ Criando √≠ndices em 'agendamentos'...")
        if criar_indice_safe(db.agendamentos, [('data', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.agendamentos, [('status', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.agendamentos, [('cliente_cpf', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.agendamentos, [('profissional_id', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.agendamentos, [('created_at', DESCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'agendamentos'")

        # 5. √çNDICES NA COLE√á√ÉO PRODUTOS
        logger.info("\n5Ô∏è‚É£ Criando √≠ndices em 'produtos'...")
        if criar_indice_safe(db.produtos, [('nome', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.produtos, [('categoria', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.produtos, [('estoque_atual', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.produtos, [('ativo', ASCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'produtos'")

        # 6. √çNDICES NA COLE√á√ÉO PROFISSIONAIS
        logger.info("\n6Ô∏è‚É£ Criando √≠ndices em 'profissionais'...")
        if criar_indice_safe(db.profissionais, [('nome', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.profissionais, [('especialidade', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.profissionais, [('cpf', ASCENDING)], unique=True, background=True): indices_criados += 1
        if criar_indice_safe(db.profissionais, [('ativo', ASCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'profissionais'")

        # 7. √çNDICES NA COLE√á√ÉO SERVICOS
        logger.info("\n7Ô∏è‚É£ Criando √≠ndices em 'servicos'...")
        if criar_indice_safe(db.servicos, [('nome', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.servicos, [('categoria', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.servicos, [('ativo', ASCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'servicos'")

        # 8. √çNDICES NA COLE√á√ÉO FILA_ATENDIMENTO
        logger.info("\n8Ô∏è‚É£ Criando √≠ndices em 'fila_atendimento'...")
        if criar_indice_safe(db.fila_atendimento, [('status', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.fila_atendimento, [('posicao', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.fila_atendimento, [('created_at', ASCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'fila_atendimento'")

        # 9. √çNDICES NA COLE√á√ÉO COMISSOES_HISTORICO
        logger.info("\n9Ô∏è‚É£ Criando √≠ndices em 'comissoes_historico'...")
        if criar_indice_safe(db.comissoes_historico, [('profissional_id', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.comissoes_historico, [('periodo_mes', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.comissoes_historico, [('created_at', DESCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'comissoes_historico'")

        # 10. √çNDICES NA COLE√á√ÉO NOTIFICACOES
        logger.info("\nüîü Criando √≠ndices em 'notificacoes'...")
        if criar_indice_safe(db.notificacoes, [('user_id', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.notificacoes, [('lida', ASCENDING)]): indices_criados += 1
        if criar_indice_safe(db.notificacoes, [('created_at', DESCENDING)]): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices processados em 'notificacoes'")

        # 11. √çNDICE COMPOSTO PARA BUSCA GLOBAL
        logger.info("\nüîç Criando √≠ndices compostos para busca global...")
        if criar_indice_safe(db.clientes, [
            ('nome', 'text'),
            ('email', 'text'),
            ('telefone', 'text')
        ], name='busca_global_clientes'): indices_criados += 1
        if criar_indice_safe(db.produtos, [
            ('nome', 'text'),
            ('descricao', 'text'),
            ('categoria', 'text')
        ], name='busca_global_produtos'): indices_criados += 1
        if criar_indice_safe(db.profissionais, [
            ('nome', 'text'),
            ('especialidade', 'text')
        ], name='busca_global_profissionais'): indices_criados += 1
        logger.info(f"   ‚úÖ √çndices de busca global processados")

        logger.info(f"\n‚úÖ OTIMIZA√á√ÉO CONCLU√çDA!")
        logger.info(f"üìä Total de √≠ndices criados: {indices_criados}")

        return True

    except Exception as e:
        logger.error(f"\n‚ùå Erro ao criar √≠ndices: {e}")
        return False

def analisar_performance(db):
    """Analisa a performance das cole√ß√µes"""

    logger.info("\n\nüìà AN√ÅLISE DE PERFORMANCE...\n")

    colecoes = [
        'users', 'clientes', 'orcamentos', 'agendamentos',
        'produtos', 'profissionais', 'servicos', 'fila_atendimento',
        'comissoes_historico', 'notificacoes'
    ]

    for colecao in colecoes:
        try:
            count = db[colecao].count_documents({})
            indices = db[colecao].list_indexes()
            num_indices = len(list(indices))

            logger.info(f"üìä {colecao.upper()}")
            logger.info(f"   Documentos: {count}")
            logger.info(f"   √çndices: {num_indices}")
            logger.info("")

        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao analisar '{colecao}': {e}\n")

def main():
    """Fun√ß√£o principal"""

    logger.info("=" * 60)
    logger.info("  OTIMIZA√á√ÉO DE BANCO DE DADOS - BIOMA v5.1.0")
    logger.info("=" * 60)

    # Conectar ao banco
    db = conectar_banco()
    if db is None:
        logger.error("\n‚ùå Falha ao conectar ao banco de dados!")
        sys.exit(1)

    # Criar √≠ndices
    sucesso = criar_indices(db)
    if not sucesso:
        logger.error("\n‚ùå Falha ao criar √≠ndices!")
        sys.exit(1)

    # Analisar performance
    analisar_performance(db)

    logger.info("\n" + "=" * 60)
    logger.info("  ‚úÖ OTIMIZA√á√ÉO CONCLU√çDA COM SUCESSO!")
    logger.info("=" * 60)
    logger.info("\nAgora o banco de dados est√° otimizado e as consultas")
    logger.info("ser√£o muito mais r√°pidas!")
    logger.info("\n")

if __name__ == '__main__':
    main()
